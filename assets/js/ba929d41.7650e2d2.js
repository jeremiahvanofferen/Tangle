"use strict";(self.webpackChunktangle=self.webpackChunktangle||[]).push([[1463],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return d}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=s(t),d=r,p=u["".concat(c,".").concat(d)]||u[d]||g[d]||o;return t?a.createElement(p,i(i({ref:n},m),{},{components:t})):a.createElement(p,i({ref:n},m))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},396:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return m},default:function(){return u}});var a=t(2122),r=t(9756),o=(t(7294),t(3905)),i=["components"],l={title:"Bundle Injection",sidebar_label:"Bundle Injection"},c=void 0,s={unversionedId:"fragments/bundles",id:"version-0.11.4/fragments/bundles",isDocsHomePage:!1,title:"Bundle Injection",description:"The goal",source:"@site/versioned_docs/version-0.11.4/fragments/bundles.md",sourceDirName:"fragments",slug:"/fragments/bundles",permalink:"/Tangle/docs/0.11.4/fragments/bundles",editUrl:"https://github.com/RBusarow/Tangle/edit/main/website/versioned_docs/version-0.11.4/fragments/bundles.md",version:"0.11.4",frontMatter:{title:"Bundle Injection",sidebar_label:"Bundle Injection"},sidebar:"version-0.11.4/Docs",previous:{title:"Fragments",permalink:"/Tangle/docs/0.11.4/fragments/fragments"}},m=[{value:"The goal",id:"the-goal",children:[]},{value:"Background",id:"background",children:[]},{value:"Tangle&#39;s generated factories",id:"tangles-generated-factories",children:[]},{value:"Limiting access",id:"limiting-access",children:[]}],g={toc:m};function u(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"the-goal"},"The goal"),(0,o.kt)("p",null,"Fragment runtime arguments must be passed via a ",(0,o.kt)("inlineCode",{parentName:"p"},"Bundle")," in order for the arguments to be present\nif the Fragment is recreated by a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/kotlin/androidx/fragment/app/FragmentManager"},"FragmentManager"),".  For those of us who don't want to rely upon\n",(0,o.kt)("a",{parentName:"p",href:"https://developer.android.com/guide/navigation/navigation-getting-started"},"Androidx Navigation"),", there's still quite a lot of boilerplate involved in passing these arguments\nand ensuring that it's compile-time safe."),(0,o.kt)("p",null,"Tangle removes as much of that boilerplate as possible,\nwhile using some Dagger tricks to prevent creating new instances without their arguments."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"@FragmentInject")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"@Inject")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@ContributesFragment(AppScope::class)\nclass MyFragment @FragmentInject constructor() : Fragment() {\n\n  val name by arg<String>("name")\n\n  @FragmentInjectFactory\n  interface Factory {\n    fun create(@TangleParam("name") name: String): MyFragment\n  }\n}\n\nclass MyActivity : BaseActivity() {\n\n  val myFragmentFactory: MyFragment.Factory = TODO("use your favorite Dagger pattern here")\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n\n    val fragment = myFragmentFactory.create(name = "Bigyan")\n\n    supportFragmentManager.beginTransaction()\n      .replace(containerId, fragment)\n      .commit()\n  }\n}\n')),(0,o.kt)("h3",{id:"background"},"Background"),(0,o.kt)("p",null,"Since long before ","[FragmentFactory]"," and ",(0,o.kt)("a",{parentName:"p",href:"https://developer.android.com/guide/navigation/navigation-getting-started"},"Androidx Navigation"),",\n",(0,o.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/9245510/7537239"},"it has long been common practice")," to create static\n",(0,o.kt)("inlineCode",{parentName:"p"},"newInstance")," functions which take the deconstructed Bundle parameters and return\na Fragment instance which already has those arguments injected as a Bundle."),(0,o.kt)("p",null,"Here's what it may look like in Kotlin:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'class MyFragment : Fragment() {\n\n  companion object {\n    fun newInstance(name: String): MyFragment {\n      val myFragment = MyFragment()\n\n      myFragment.arguments = bundleOf("name" to name)\n      return myFragment\n    }\n  }\n}\n')),(0,o.kt)("h3",{id:"tangles-generated-factories"},"Tangle's generated factories"),(0,o.kt)("p",null,"For the ",(0,o.kt)("inlineCode",{parentName:"p"},"MyFragment")," definition above, Tangle will generate the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'public class MyFragment_Factory_Impl(\n  public val delegateFactory: MyFragment_Factory\n) : MyFragment.Factory {\n  public override fun create(name: String): MyFragment {\n    val bundle = bundleOf(\n          "name" to name\n        )\n    return delegateFactory.get().apply {\n      this@apply.arguments = bundle\n    }\n  }\n\n  public companion object {\n    @JvmStatic\n    public fun create(delegateFactory: MyFragment_Factory): Provider<MyFragment.Factory> =\n        InstanceFactory.create(MyFragment_Factory_Impl(delegateFactory))\n  }\n}\n')),(0,o.kt)("p",null,"It will then create a Dagger binding for ",(0,o.kt)("inlineCode",{parentName:"p"},"MyFragment_Factory_Impl")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"MyFragment.Factory"),",\nwhich allows us to use it in our code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MyNavigationImpl @Inject constructor(\n  // fragments without bundle arguments can be injected in a Provider\n  val myListFragmentProvider: Provider<MyListFragment>,\n  // fragments with a factory must be injected this way\n  val myFragmentFactory: MyFragment.Factory\n) : MyNavigation {\n\n  override fun goToMyListFragment(name: String){\n    val fragment = myFragmentFactory.create(name)\n    // actual navigation logic would go here\n  }\n  override fun goToMyFragment(name: String){\n    val fragment = myFragmentFactory.create(name)\n    // actual navigation logic would go here\n  }\n}\n")),(0,o.kt)("p",null,'These factories are essentially an "entry point" to the ',(0,o.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Tangle/api/tangle-fragment-api/tangle.fragment/-tangle-fragment-factory"},"TangleFragmentFactory"),".  Once the factory\nhas initialized its Fragment, the arguments are established and cached by the Android framework.\nIf the Fragment needs to be recreated by the ",(0,o.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Tangle/api/tangle-fragment-api/tangle.fragment/-tangle-fragment-factory"},"TangleFragmentFactory"),", the new instance will be\ncreated using a ",(0,o.kt)("inlineCode",{parentName:"p"},"Provider")," and just invoking the constructor, without recreating the ",(0,o.kt)("inlineCode",{parentName:"p"},"Bundle"),"."),(0,o.kt)("h3",{id:"limiting-access"},"Limiting access"),(0,o.kt)("p",null,"If a Fragment requires a custom factory for bundle arguments,\nTangle ",(0,o.kt)("em",{parentName:"p"},"does")," create a ",(0,o.kt)("inlineCode",{parentName:"p"},"@Provides"),"-annotated function, but it's hidden behind a qualifier:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Provides\n@TangleFragmentProviderMap\npublic fun provideMyFragment(): MyFragment = MyFragment_Factory.newInstance()\n")),(0,o.kt)("p",null,"This means that if anyone attempts to inject it like a normal Dagger dependency:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class SomeClass @Inject constructor(\n  val myFragmentProvider: Provider<MyFragment>\n)\n")),(0,o.kt)("p",null,"...Dagger will fail the build with a very familiar error message:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"[Dagger/MissingBinding]"," com.example.MyFragment cannot be provided without an @Inject constructor or an @Provides-annotated method.")))}u.isMDXComponent=!0}}]);